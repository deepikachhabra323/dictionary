import Head from "next/head";
import { useState } from "react";
import styles from "../styles/Home.module.css";
const { v4: uuidv4 } = require('uuid');
const axios = require('axios').default;

var subscriptionKey = "bf400f67a2364b5f8a289cdc4c39ee40";
var endpoint = "https://api.cognitive.microsofttranslator.com";

// Add your location, also known as region. The default is global.
// This is required if using a Cognitive Services resource.
var location = "southeastasia";
export default function Home() {
  let [word, setWord] = useState("");
  let [results, setResults] = useState({});
  let [translations, setTranslation] = useState({});
  const callApi = (single,cb,cb2)=>{
    fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${single}`).then(
          async (res) => {
            let result = await res.json();
            console.log(result);
            // result = await result
            cb(result)
          }
        );
        axios({
          baseURL: endpoint,
          url: '/translate',
          method: 'post',
          headers: {
              'Ocp-Apim-Subscription-Key': subscriptionKey,
              'Ocp-Apim-Subscription-Region': location,
              'Content-type': 'application/json',
              'X-ClientTraceId': uuidv4().toString()
          },
          params: {
              'api-version': '3.0',
              'from': 'en',
              'to': ['hi']
          },
          data: [{
              'text': single
          }],
          responseType: 'json'
        }).then(function(response){
          cb2(response.data[0].translations[0].text);
            console.log(response.data,response.data[0].translations[0].text);
        })
  }
  const getResults = () => {
    let words = word.split(',');
    let results = {},translations = {};
    words.map(single=>{
      if(!results[single]){
        results[single] = [];
        callApi(single,(result)=>{
          results = {...results,[single]:result}
          setResults({...results});
        },
        (tr)=>{
          translations[single] = tr;
          setTranslation(translations)
        })
        
      }
    })
    setResults({...results});
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Word Dictionary</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Welcome to Word Dictionary!</h1>
        <form onSubmit={(e)=>{e.preventDefault();getResults(e)}}>
          <input
            onChange={(e) => {
              setWord(e.target.value);
            }}
            className={styles.search}
            value={word}
            placeholder="type here"
          />
          <button type="submit" >Search</button>
        </form>
        <h3>Result:</h3>
        <div style={{maxWidth:'900px'}}>
          {Object.keys(results).map((r,i) => {
            let res = results[r][0];
            let word = r
            // debugger
            return (
              <><div key={i} style={{display:'flex'}}>
                <div style={{padding:'0 50px',minWidth:'200px'}}>
                  <div style={{textTransform:'uppercase'}}><b>{word}</b></div>
                  <div>{translations[word]}</div>
                </div>
                <div>{res?.meanings.map((meaning,i) => {
                  return (
                    <div key={`results${i}`}>
                      ({meaning.partOfSpeech}) &nbsp;                
                      <span>{meaning.definitions[0].definition}</span><br/>
                      <em><small>example: {meaning.definitions[0].example}</small></em><br/>
                      {meaning.definitions[0].synonyms.length ? <><em><small>synonyms: {meaning.definitions[0].synonyms.slice(0,8).join(',')}</small></em><br/></>:null}
                      {meaning.definitions[0].antonyms.length ? <><em><small>antonyms: {meaning.definitions[0].antonyms.slice(0,8).join(',')}</small></em><br/></>:null}
                      <br/>
                    </div>
                  );
                })}
                </div>
              </div>
              <br/>
              <br/>
              <br/>
              </>
            );
          })}
        </div>
      </main>
    </div>
  );
}
